runApp('~/Desktop/Appsilon-Shiny-Templates-Bundle/basic-destination-overview')
runApp('~/Desktop/Appsilon-Shiny-Templates-Bundle/fluent-app')
runApp('~/Desktop/Appsilon-Shiny-Templates-Bundle/fluent-app')
runApp('~/Desktop/Appsilon-Shiny-Templates-Bundle/fluent-app/src')
runApp('~/Desktop/Appsilon-Shiny-Templates-Bundle/basic-destination-overview')
runApp('~/Desktop/Appsilon-Shiny-Templates-Bundle/basic-destination-overview')
runApp('~/Documents/Projects/shiny/shinyapps/basic-destination-overview')
runApp('~/Documents/Projects/shiny/shinyapps/shiny-enterprise-dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
detach("package:bs4Dash", unload = TRUE)
detach("package:bslib", unload = TRUE)
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
detach("package:bslib", unload = TRUE)
detach("package:billboarder", unload = TRUE)
detach("package:base", unload = TRUE)
library(abind)
detach("package:abind", unload = TRUE)
detach("package:apexcharter", unload = TRUE)
detach("package:zoo", unload = TRUE)
detach("package:xts", unload = TRUE)
detach("package:utils", unload = TRUE)
detach("package:tigris", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:stats", unload = TRUE)
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp()
library(base)
runApp()
runApp()
library(base)
runApp()
library(readr)
runApp()
runApp()
shiny::runApp()
library(argonDash)
runApp()
runApp()
detach("package:argonDash", unload = TRUE)
library(bslib)
library(bs4Dash)
runApp()
detach("package:bslib", unload = TRUE)
detach("package:bs4Dash", unload = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(launch.browser = FALSE)
shiny::runApp()
location = read.csv("data/Ames_loc.csv")
df_predictions = read.csv("./home_flipping.csv")
undervalued25 = read.csv('./undervalued_homes.csv')
df_coefs = read_csv('./final_predictions.csv')
df_feats = read.csv('./final_features.csv')
df_places = read.csv('./Ames_places.csv')
df_predictions
df_predictions %>%
filter(Prop_Addr == address)
address = '4104 VALLEY VIEW RD'
df_predictions %>%
filter(Prop_Addr == address)
address = '3412 TAFT AVE'
df_predictions %>%
filter(Prop_Addr == address)
address = '3412 TAFT AVE'
property = df_predictions %>%
filter(Prop_Addr == address)
property$SalePrice
address = '3412 TAFT AVE'
property = df_predictions %>%
filter(Prop_Addr == address)
property
address = '3412 TAFT AVE'
property = df_predictions %>%
filter(Prop_Addr == address)
neighborhood = property$Neighborhood
price = property$SalePrice
SF = property$GrLivArea
built = property$YearBuilt
quality = property$OverallQual
cond = property$OverallCond
price
price - price * 0.1
min_price = price - price * 0.1
max_price = price + price * 0.1
min_price, max_price
cat(min_price, max_price)
df_predictions %>%
min_price
df_predictions %>%
filter(price < min_price)
df_predictions %>%
filter(price > min_price)
df_predictions %>%
filter(price > min_price,
price < max_price)
df_predictions %>%
filter(price < max_price)
df_predictions %>%
filter(price ? max_price)
df_predictions %>%
filter(price > max_price)
df_predictions %>%
filter(price < max_price)
df_predictions %>%
filter(SalePrice < max_price)
df_predictions %>%
filter(SalePrice > min_price,
SalePrice < max_price)
df_predictions %>%
filter(SalePrice > min_price,
SalePrice < max_price,
Neighborhood = neighborhood)
df_predictions %>%
filter(SalePrice > min_price,
SalePrice < max_price,
Neighborhood == neighborhood)
min_price = price - price * 0.2
max_price = price + price * 0.2
cat(min_price, max_price)
max_price = price + price * 0.2
cat(min_price, max_price)
cat(min_price, max_price)
```{r}
df_predictions %>%
filter(SalePrice > min_price,
SalePrice < max_price,
Neighborhood == neighborhood)
min_price = price - price * 0.2
max_price = price + price * 0.2
df_predictions %>%
filter(SalePrice > min_price,
SalePrice < max_price,
Neighborhood == neighborhood)
min_price = price - price * 0.2
max_price = price + price * 0.2
df_predictions %>%
filter(Neighborhood == neighborhood)
min_price = price - price * 0.3
max_price = price + price * 0.3
df_predictions %>%
filter(Neighborhood == neighborhood)
min_price = price - price * 0.3
max_price = price + price * 0.3
df_predictions %>%
filter(Neighborhood == neighborhood,
SalePrice > min_price)
min_price = price - price * 0.3
max_price = price + price * 0.3
df_predictions %>%
filter(Neighborhood == neighborhood,
SalePrice > min_price,
SalePrice < max_price)
min_price = price - price * 0.5
max_price = price + price * 0.5
df_predictions %>%
filter(Neighborhood == neighborhood,
SalePrice > min_price,
SalePrice < max_price)
min_price = price - price * 0.5
max_price = price + price * 2
df_predictions %>%
filter(Neighborhood == neighborhood,
SalePrice > min_price,
SalePrice < max_price)
min_price = price - price * 0.5
max_price = price + price * 1
df_predictions %>%
filter(Neighborhood == neighborhood,
SalePrice > min_price,
SalePrice < max_price)
min_price = price - price * 0.5
max_price = price + price * 0.8
df_predictions %>%
filter(Neighborhood == neighborhood,
SalePrice > min_price,
SalePrice < max_price)
min_price = price - price * 0.5
max_price = price + price * 0.7
df_predictions %>%
filter(Neighborhood == neighborhood,
SalePrice > min_price,
SalePrice < max_price)
haversine_distance <- function(lat1, lon1, lat2, lon2) {
R <- 6371 # Earth's radius in kilometers
dLat <- (lat2 - lat1) * pi / 180
dLon <- (lon2 - lon1) * pi / 180
lat1 <- lat1 * pi / 180
lat2 <- lat2 * pi / 180
a <- sin(dLat/2)^2 + sin(dLon/2)^2 * cos(lat1) * cos(lat2)
c <- 2 * atan2(sqrt(a), sqrt(1-a))
d <- R * c
return(d)
}
property
properties
df_predictions %>%
filter(~df_predictions)
df_predictions %>%
filter(Prop_Addr != address)
comps = df_predictions %>% filter(Prop_Addr != address)
comps
comps$Latitude[1]
comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(comps)) {
dist = haversine_distance(property$Latitude, property$Longitude,
comps$Latitude[i], comps$Longitude[i])
}
```{r}
dist
comps
comps$Distance
comps$Distance = 1
comps
comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(comps)) {
comps$distance[i] = haversine_distance(
property$Latitude, property$Longitude,
comps$Latitude[i],comps$Longitude[i]
)
}
comps
# comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(df_predictions)) {
if (df_predictions$Prop_Addr[i] != address) {
df_predictions$distance[i] = haversine_distance(
property$Latitude, property$Longitude,
df_predictions$Latitude[i],df_predictions$Longitude[i]
)
}
}
df_predictions
df_predictions %>%
filter(Prop_Addr == address)
# comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(df_predictions)) {
if (df_predictions$Prop_Addr[i] != address) {
df_predictions$distance[i] = haversine_distance(
property$Latitude, property$Longitude,
df_predictions$Latitude[i],df_predictions$Longitude[i]
)
} else {
'hi'
}
}
df_predictions %>%
filter(Prop_Addr == address)
# comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(df_predictions)) {
if (df_predictions$Prop_Addr[i] != address) {
df_predictions$distance[i] = haversine_distance(
property$Latitude, property$Longitude,
df_predictions$Latitude[i],df_predictions$Longitude[i]
)
} else {
df_predictions$distance[i] = 'hi'
}
}
df_predictions %>%
filter(Prop_Addr == address)$distance
df_predictions %>%
filter(Prop_Addr == address)
# comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(df_predictions)) {
if (df_predictions$Prop_Addr[i] != address) {
df_predictions$distance[i] = haversine_distance(
property$Latitude, property$Longitude,
df_predictions$Latitude[i],df_predictions$Longitude[i]
)
} else {
df_predictions$distance[i] = NULL
}
}
# comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(df_predictions)) {
if (df_predictions$Prop_Addr[i] != address) {
df_predictions$distance[i] = haversine_distance(
property$Latitude, property$Longitude,
df_predictions$Latitude[i],df_predictions$Longitude[i]
)
} else {
df_predictions$distance[i] = ''
}
}
df_predictions %>%
filter(Prop_Addr == address)
df_predictions %>%
arrange(distance)
df_predictions[2:] %>%
df_predictions %>%
arrange(distance)
df_predictions[1]
df_predictions[1:]
df_predictions[1,]
df_predictions[1]
df_predictions[,]
df_predictions %>%
arrange(distance)
df_predictions %>%
arrange(distance) %>%
head(2, 10)
df_predictions %>%
arrange(distance) %>%
head(2:10)
df_predictions %>%
arrange(distance) %>%
head(2, 10)
df_predictions %>%
arrange(distance) %>%
head(11)
df_predictions %>%
arrange(distance) %>%
head(10)
(df_predictions %>%
arrange(distance) %>%
head(10))[2:, ]
(df_predictions %>%
arrange(distance) %>%
head(10))[, ]
(df_predictions %>%
arrange(distance) %>%
head(10))[2, ]
(df_predictions %>%
arrange(distance) %>%
head(10))[2, :]
(df_predictions %>%
arrange(distance) %>%
head(10))[2, ]
(df_predictions %>%
arrange(distance) %>%
head(10))[]
# comps = df_predictions %>% filter(Prop_Addr != address)
for (i in 1:nrow(df_predictions)) {
# if (df_predictions$Prop_Addr[i] != address) {
df_predictions$distance[i] = haversine_distance(
property$Latitude, property$Longitude,
df_predictions$Latitude[i],df_predictions$Longitude[i]
)
# } else {
#   df_predictions$distance[i] = ''
# }
}
df_predictions %>%
filter(Prop_Addr == address)
df_predictions %>%
filter(distance != 0) %>%
arrange(distance)
df_predictions %>%
filter(distance != 0) %>%
arrange(distance) %>%
head(10)
comps
source("~/Documents/Projects/shiny/R/app_template.R", echo=TRUE)
runApp('~/Documents/Projects/shiny/shiny-components')
runApp('~/Documents/Projects/shiny/inst/app_template')
runApp('~/Documents/Projects/shiny/inst/app_template')
runApp('~/Documents/Projects/shiny/inst/examples/07_widgets')
runApp('~/Documents/Projects/shiny/inst/examples/03_reactivity')
runApp('~/Documents/Projects/shiny/inst/examples/10_download')
runApp('~/Documents/Projects/shiny/shinyapps/dashboard similar to ames')
runApp('~/Documents/Projects/shiny/shiny-components')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/shiny-enterprise-dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
library(leaflet.extras)
library(leaflet.providers)
library(leaflegend)
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp('~/Documents/Projects/shiny/shinyapps/nice looking dashboard')
runApp()
runApp()
runApp(launch.browser = FALSE)
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
shiny::runGitHub(repo="shinyAppTutorials",username="davidruvolo51",subdir="shiny_landing_page")
runApp('~/Documents/Projects/MLProject/shiny app')
library(bs4Dash)
runApp()
runApp()
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
install.packages('thematic')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
bs4DashGallery()
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
library(shinyLP)
theme = bs_theme(version = 4)#'Minty'
runApp()
runApp()
detach("package:bs4Dash", unload = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Documents/Projects/MLProject/shiny app/app.R", echo=TRUE)
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp()
detach("package:bslib", unload = TRUE)
runApp()
detach("package:bs4Dash", unload = TRUE)
detach("package:bslib", unload = TRUE)
runApp()
detach("package:bs4Dash", unload = TRUE)
detach("package:bslib", unload = TRUE)
runApp()
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
source("~/Documents/Projects/MLProject/shiny app/app.R", echo=TRUE)
source("~/Documents/Projects/MLProject/shiny app/app.R", echo=TRUE)
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
source("~/Documents/Projects/MLProject/shiny app/app.R", echo=TRUE)
source("~/Documents/Projects/MLProject/shiny app/app.R", echo=TRUE)
runApp()
detach("package:bs4Dash", unload = TRUE)
runApp()
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app', launch.browser = FALSE)
runApp()
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
detach("package:bs4Dash", unload = TRUE)
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
runApp('~/Documents/Projects/MLProject/shiny app')
detach("package:plotly", unload = TRUE)
library(plotly)
runApp('~/Documents/Projects/MLProject/shiny app')
detach("package:bs4Dash", unload = TRUE)
detach("package:bslib", unload = TRUE)
runApp('~/Documents/Projects/MLProject/shiny app')
library(bslib)
runApp('~/Documents/Projects/MLProject/shiny app')
detach("package:glue", unload = TRUE)
library(glue)
runApp('~/Documents/Projects/MLProject/shiny app')
detach("package:htmltools", unload = TRUE)
runApp('~/Documents/Projects/MLProject/shiny app')
library(htmltools)
runApp()
detach("package:bs4Dash", unload = TRUE)
runApp()
runApp()
detach("package:bs4Dash", unload = TRUE)
runApp()
runApp()
runApp()
shiny::runApp()
library(leaflet.extras)
library(leaflegend)
library(leaflet.providers)
library(leafpop)
library(shinyEffects)
detach("package:shinyEffects", unload = TRUE)
library(shinythemes)
library(summaryBox)
runApp()
shiny::runApp()
