shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinydashboard)
runApp()
runApp()
runApp()
shiny::runApp()
runApp('~/Documents/Projects/RProject')
df = read.csv('./../data/cleaned_housing.csv')
location = read.csv("./../data/Ames_loc.csv")
location = na.omit(location)
df = read.csv('./../data/cleaned_housing.csv')
location
df
location
runApp()
unique(df$Neighborhood)
df$Neighborhood
runApp()
runApp()
runApp('daniel app.R')
runApp('daniel app.R')
df %>%
filter(Neighborhood == 'Mitchel')
min(df2$SalePrice)
df2 = df %>%
filter(Neighborhood == 'Mitchel')
min(df2$SalePrice)
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
mean(df2$SalePrice)
mean(df2$SalePrice) - min(df2$SalePrice)
min(df2$SalePrice)
(mean(df2$SalePrice) - min(df2$SalePrice))/2 + min(df2$SalePrice)
max(df2$SalePrice)
summary(df2$SalePrice)
summary(df2$SalePrice)[2]
summary(df2$SalePrice)
summary(df2$SalePrice)[5] # 3rd quartile
summary(df2$SalePrice)[2] # 1st quartile
summary(df2$SalePrice)[5] # 3rd quartile
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
df %>%
filter(SalePrice < 15000)
runApp('daniel app.R')
runApp('daniel app.R')
summary(df$SalePrice)[5]
max(df2$SalePrice)
max(df$SalePrice)
summary(df$SalePrice)
max(df$SalePrice) - min(df$SalePrice)
max(df$SalePrice) - min(df$SalePrice) / 2
0.25 * max(df$SalePrice)
0.75 * max(df$SalePrice)
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
runApp('daniel app.R')
library(reticulate)
runApp('daniel app.R')
runApp('daniel app.R')
sm = import('statsmodels.api')
library(reticulate)
sns = import('seaborn')
library(reticulate)
sns = import('seaborn')
use_python(path_to_python)
library(reticulate)
path_to_python <- "/anaconda/bin/python"
use_python(path_to_python)
path_to_python <- "~/opt/anaconda3/bin/python"
use_python(path_to_python)
sns = import('seaborn')
