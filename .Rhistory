# differencing so it can be weakly stationary
ts = diff(unlist(random_walk[, 2]), 1)
plot.ts(ts, main = 'Random Walk differenced by 1')
ts = diff(random_walk[[, 2]]))
random_walk[[,]]
random_walk[[,2]]
random_walk[[1,2]]
random_walk[[]]
random_walk[[2]]
ts = diff(random_walk[[2]], 1)
# differencing so it can be weakly stationary
ts = diff(random_walk[[2]], 1)
plot.ts(ts, main = 'Random Walk differenced by 1')
ts_data3 = list(tsdl[[481]], meta_tsdl[481,])
ts_data3 = list(tsdl[[481]], meta_tsdl[481,])
meta_tsdl[[481,2]]
plot.ts(ts_data3[[1]])
plot.ts(ts_data3[[1]][1:40])
# data looks good
Box.test(ts_data3[[1]],
lag=log(length(ts_data3[[1]])))
#pvalue is low, meaning we can reject the null hypothesis and go for the test (some autocorrelations are significant)
acf2(ts_data3[[1]])
# acf = 1 sig. lag, pacf = 3 sig lags
d = 0
DD = 0
per = 0
for(p in 1:4){
for(q in 1:2){
for(p_seasonal in 1:1){
for(q_seasonal in 1:1){
if(p+d+q+p_seasonal+DD+q_seasonal<=8){
model<-arima(x=ts_data3[[1]], order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model = arima(x=ts_data3[[1]], order = c(3,0,1), seasonal = list(order = c(0,0,0), period = per))
model
predict = forecast(model, h=24, level = 80)
autoplot(predict)
ts_data3 = list(tsdl[[481]], meta_tsdl[481,])
meta_tsdl[[481,2]]
plot.ts(ts_data3[[1]])
plot.ts(ts_data3[[1]][1:40])
plot.ts(ts_data3[[1]])
Box.test(random_walk[[2]], lag=log(length(random_walk[[2]])))
Box.test(random_walk[[2]], lag=log(length(random_walk[[2]])))
ts_data3 = list(tsdl[[481]], meta_tsdl[481,])
meta_tsdl[[481,2]]
plot.ts(ts_data3[[1]])
plot.ts(ts_data3[[1]][1:40])
# data looks good
Box.test(ts_data3[[1]],
lag=log(length(ts_data3[[1]])))
#pvalue is low, meaning we can reject the null hypothesis and go for the test (some autocorrelations are significant)
acf2(ts_data3[[1]])
# acf = 1 sig. lag, pacf = 3 sig lags
d = 0
DD = 0
per = 0
for(p in 1:4){
for(q in 1:2){
for(p_seasonal in 1:1){
for(q_seasonal in 1:1){
if(p+d+q+p_seasonal+DD+q_seasonal<=8){
model<-arima(x=ts_data3[[1]], order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model = arima(x=ts_data3[[1]], order = c(3,0,1), seasonal = list(order = c(0,0,0), period = per))
model
predict = forecast(model, h=24, level = 80)
autoplot(predict)
Box.test(ts_data3[[1]],
lag=log(length(ts_data3[[1]])))
plot.ts(ts_data[[1]])
ts_data = list(tsdl[[2]], meta_tsdl[2,])
meta_tsdl[[2,2]]
plot.ts(ts_data[[1]])
plot.ts(ts_data[[1]][1:40])
log_ts = log(random_walk[[2]])
diff(log_ts)
plot.ts(diff(log_ts, 12))
log_ts = log(random_walk[[2]])
diff(log_ts)
plot.ts(diff(log_ts, 12))
ts_data = list(tsdl[[2]], meta_tsdl[2,])
meta_tsdl[[2,2]]
plot.ts(ts_data[[1]])
plot.ts(ts_data[[1]][1:40])
# there's definitely a season, and a trend
# so first, we need to take the log transformation, then do the differencing
log_ts = log(ts_data[[1]])
diff(log_ts)
plot.ts(diff(log_ts, 12))
# plot.ts(diff(log_ts)[1:40])
# so this took out the trend, but looks like the season is still there. so lets plot the difference again
log_return_ts = diff(diff(log_ts, 12))
plot.ts(log_return_ts)
# plot.ts(log_return_ts[1:40])
Box.test(log_return_ts,
lag=log(length(log_return_ts)))
#pvalue is low, meaning we can reject the null hypothesis and go for the test (some autocorrelations are significant)
acf2(log_return_ts)
# q = 1
# Q = 1
# p = 3
# P = 0
d = 1
DD = 1
per = 12
for(p in 1:4){
for(q in 1:2){
for(p_seasonal in 1:1){
for(q_seasonal in 1:2){
if(p+d+q+p_seasonal+DD+q_seasonal<=11){
model<-arima(x=log_ts,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model = arima(x=log_ts, order = c(3,1,1), seasonal = list(order = c(0,1,1), period = per))
model
predict = forecast(model, h=24, level = 80)
autoplot(predict)
ts_data = list(tsdl[[2]], meta_tsdl[2,])
meta_tsdl[[2,2]]
plot.ts(ts_data[[1]])
acf2(ts_data3[[1]])
acf(ts_data[[3]])
acf(ts_data3[[1]])
plot.ts(ts_data3[[1]])
plot.ts(ts_data3[[1]][1:40])
Box.test(ts_data3[[1]],
lag=log(length(ts_data3[[1]])))
plot.ts(random_walk[[2]])
plot.ts(random_walk[[2]], main = "Random Walk of Houses Sold")
,
plot.ts(random_walk[, 2], main = "Random Walk of Houses Sold")
plot.ts(random_walk[, 2],
main = "Random Walk of Houses Sold")[1:40]
plot.ts(random_walk[, 2],
main = "Random Walk of Houses Sold")[1:10]
plot.ts(random_walk[, 2],
main = "Random Walk of Houses Sold")[1:10]
plot.ts(random_walk[, 2][1:10],
main = "Random Walk of Houses Sold")
plot.ts(random_walk[[2]][1:10],
main = "Random Walk of Houses Sold")
plot.ts(random_walk[[2]][1:20,
plot.ts(random_walk[[2]][1:20,
plot.ts(random_walk[[2]][1:20],
main = "Random Walk of Houses Sold")
plot.ts(random_walk[[2]][1:20],
plot.ts(random_walk[[2]][1:20],
main = "Random Walk of Houses Sold")
plot.ts(random_walk[[2]][1:15],
main = "Random Walk of Houses Sold")
plot.ts(random_walk[[2]][1:12],
main = "Random Walk of Houses Sold")
plot.ts(random_walk[[2]],
main = "Random Walk of Houses Sold")
plot.ts(ts_data3[[1]])
plot.ts(ts_data3[[1]][1:40])
plot.ts(random_walk[[2]])
plot.ts(random_walk[[2]][1:12])
plot.ts(random_walk[[2]][1:25])
plot.ts(random_walk[[2]][1:20])
plot.ts(diff(log_ts, 12))
log_ts = log(ts_data[[1]])
diff(log_ts)
plot.ts(diff(log_ts, 12))
plot.ts(ts_data3[[1]])
plot.ts(ts_data3[[1]][1:40])
Box.test(random_walk[[2]],
lag = log(length(random_walk[[2]])))
ts_data = list(tsdl[[2]], meta_tsdl[2,])
meta_tsdl[[2,2]]
plot.ts(ts_data[[1]])
Box.test(ts_data[[1]],
lag=log(length(ts_data[[1]])))
log_housing = log(random_walk[[2]])
log_housing = log(random_walk[[2]])
diff(log_housing)
plot.ts(diff(log_housing))
plot.ts(diff(diff(log_housing)))
plot.ts(diff(diff(log_housing, 12)))
plot.ts(diff(log_housing, 12))
plot.ts(diff(diff(log_housing, 12)))
plot.ts(diff(log_housing, 12))
plot.ts(diff(diff(log_housing, 12)))
plot.ts(diff(diff(diff(log_housing, 12)))
plot.ts(diff(diff(diff(diff(log_housing, 12)))))
plot.ts(diff(log_housing, 12))
plot.ts(diff(diff(log_housing, 12)))
plot.ts(diff(diff(diff(log_housing, 12))))
plot.ts(diff(diff(diff(diff(log_housing, 12))))))
plot.ts(diff(log_housing, 12))
plot.ts(diff(diff(log_housing, 12)))
plot.ts(diff(diff(diff(log_housing, 12))))
plot.ts(diff(diff(diff(diff(log_housing, 12)))))
plot.ts(diff(diff(diff(diff(diff(log_housing, 12))))))
plot.ts(diff(diff(log_housing, 12)))
log_ts = log(ts_data[[1]])
diff(log_ts)
plot.ts(diff(log_ts, 12))
plot.ts(diff(diff(log_housing)))
plot.ts(diff(diff(log_housing, 12)))
plot.ts(log_return_ts)
plot.ts(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(log_housing, 12)))))))))))
plot.ts(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(diff(log_housing, 12)))))))))))))))))))))
plot.ts(diff(diff(diff(diff(diff(log_housing, 12))))))
plot.ts(diff(log_housing, 12))
plot.ts(diff(diff(log_housing, 12)))
plot.ts(diff(diff(diff(log_housing, 12))))
plot.ts(diff(diff(diff(diff(log_housing, 12)))))
plot.ts(diff(diff(diff(diff(diff(log_housing, 12))))))
housing_diff = diff(diff(housing_log, 12))
housing_log = log(random_walk[[2]])
housing_diff = diff(diff(housing_log, 12))
plot(housing_diff)
plot.ts(housing_diff)
plot(housing_diff)
plot.ts(housing_diff)
Box.test(housing_diff,
lag = log(length(housing_diff)))
acf2(housing_diff)
acf2(log_return_ts)
Box.test(housing_diff,
lag = log(length(housing_diff)))
housing_log = log(random_walk[[2]])
housing_diff = diff(diff(housing_log, 12))
plot.ts(housing_diff)
housing_diff = diff(housing_log, 12)
plot.ts(housing_diff)
d = 0
DD = 2
Box.test(housing_diff,
lag = log(length(housing_diff)))
acf2(housing_diff)
housing_log = log(random_walk[[2]])
housing_diff = diff(housing_log, 12)
plot.ts(housing_diff)
d = 0
DD = 2
Box.test(housing_diff,
lag = log(length(housing_diff)))
housing_diff = diff(diff(housing_log, 12))
plot.ts(housing_diff)
d = 0
DD = 2
Box.test(housing_diff,
lag = log(length(housing_diff)))
acf2(housing_diff)
acf(housing_diff)
acf2(log_return_ts)
housing_diff = diff(housing_log, 12)
plot.ts(housing_diff)
housing_diff2 = diff(diff(housing_log, 12))
plot.ts(housing_diff2)
Box.test(housing_diff2,
lag = log(length(housing_diff2)))
d = 0
DD = 2
acf(housing_diff)
acf2(housing_diff)
acf2(housing_diff, 12)
acf2(housing_diff, 5)
acf2(housing_diff, 2)
acf2(housing_diff, 12)
acf2(housing_diff)
acf2(housing_diff2)
acf2(housing_diff2, 12)
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=log_ts,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=log_ts,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model = arima(x=log_ts, order = c(3,0,1),
seasonal = list(order = c(3,1,1), period = per))
model
predict = forecast(model, h=24, level = 80)
autoplot(predict)
model = arima(x=housing_diff2, order = c(3,0,1),
seasonal = list(order = c(3,1,1), period = per))
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=housing_diff2,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
# looks like there is variance, and we need to remove that
housing_log = log(random_walk[[2]])
# we also need to do seasonal differencing, but not local differencing
housing_diff = diff(housing_log, 12)
plot.ts(housing_diff)
Box.test(housing_diff,
lag = log(length(housing_diff)))
# we took out the seasonal differencing, but the box test shows that p-value is high (0.61), meaning that autocorrelation coefficients are not significant.
# let's  do another round of differencing, and see where we go from there.
housing_diff2 = diff(diff(housing_log, 12))
plot.ts(housing_diff2)
Box.test(housing_diff2,
lag = log(length(housing_diff2)))
# looks like the p=value is now ~ 0.02, meaning that we can reject the null hypothesis
# autocorrelations are now significant. we can proceed with the analysis
acf2(housing_diff2, 12)
# q = 1
# Q = 1
# p = 3
# P = 3
d = 0
DD = 2
per = 12
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=housing_log,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=housing_log,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model<-arima(x=housing_diff2,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=housing_diff2,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
model<-arima(x=diff(housing_diff2),
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=diff(housing_diff2),
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
library(datasets)
library(forecast)
library(astsa)
# run these lines if you do not have devtools or tsdl installed.
# install.packages("devtools")
# devtools::install_github("FinYang/tsdl")
library(tsdl)
complete_df = read.csv("./data.csv", row.names = 1)
set.seed(444)
library(dplyr)
library(tidyr)
library(ggplot2)
library(forecast)
library(astsa)
library(tsdl)
df_housing = read.csv('./data/Ames_Housing_Price_Data.csv')
df_estate = read.csv('./data/Ames_Real_Estate_Data.csv')
housing_log = log(random_walk[[2]])
# looks like there is variance, and we need to remove that
housing_log = log(random_walk[[2]])
# we also need to do seasonal differencing, but not local differencing
housing_diff = diff(housing_log, 12)
plot.ts(housing_diff)
Box.test(housing_diff,
lag = log(length(housing_diff)))
# we took out the seasonal differencing, but the box test shows that p-value is high (0.61), meaning that autocorrelation coefficients are not significant.
# let's  do another round of differencing, and see where we go from there.
housing_diff2 = diff(diff(housing_log, 12))
plot.ts(housing_diff2)
Box.test(housing_diff2,
lag = log(length(housing_diff2)))
# looks like the p=value is now ~ 0.02, meaning that we can reject the null hypothesis
# autocorrelations are now significant. we can proceed with the analysis
acf2(housing_diff2, 12)
# q = 1
# Q = 1
# p = 3
# P = 3
d = 0
DD = 2
per = 12
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=housing_diff2,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
random_walk = df_housing %>%
mutate(across(c(YrSold, MoSold), as.character),
DateSold = as.Date(paste0(YrSold,'-',MoSold,'-1'))) %>%
group_by(DateSold, Neighborhood) %>%
summarise(SalePrice = mean(SalePrice))
# plot.ts(random_walk[, 2], main = "Random Walk of Houses Sold")
random_walk
plot.ts(random_walk[, 2], main = "Random Walk of Houses Sold")
length(random_walk)
random_walk
distinct(df_housing$Neighborhood)
unique(df_housing$Neighborhood)
length(unique(df_housing$Neighborhood))
random_walk
896 / 28
length(unique(df_housing$Neighborhood))
896 / 28
acf2(housing_diff2, 12)
d = 0
DD = 2
per = 12
for(p in 1:4){
for(q in 1:4){
for(p_seasonal in 1:4){
for(q_seasonal in 1:4){
if(p+d+q+p_seasonal+DD+q_seasonal<=18){
model<-arima(x=housing_diff2,
order = c((p-1),d,(q-1)), seasonal = list(order=c((p_seasonal-1),DD,(q_seasonal-1)), period=per))
pval<-Box.test(model$residuals, lag=log(length(model$residuals)))
sse<-sum(model$residuals**2)
cat(p-1,d,q-1,p_seasonal-1,DD,q_seasonal-1,per, 'AIC=', model$aic, ' SSE=',sse,' p-VALUE=', pval$p.value,'\n')
}
}
}
}
}
